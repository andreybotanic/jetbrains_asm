/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.andreybotanic.asm.nasm;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.andreybotanic.asm.nasm.psi.NasmTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_NasmLexer.flex</tt>
 */
public class _NasmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\4\2\3\1\5\22\0\1\1\1\112\1\103\1\67\1\71\1\6\1\120\1\102\1\106"+
    "\1\107\1\116\1\115\1\110\1\77\1\37\1\117\1\73\1\45\1\50\1\47\2\74\1\46\3\74"+
    "\1\72\1\25\1\114\1\111\1\113\1\65\1\67\1\20\1\55\1\11\1\14\1\15\1\17\1\22"+
    "\1\56\1\7\2\76\1\12\1\76\1\10\1\23\1\76\1\23\1\24\1\21\1\23\1\13\1\76\1\23"+
    "\1\16\2\23\1\104\1\101\1\105\1\122\1\70\1\100\1\42\1\43\1\30\1\41\1\27\1\17"+
    "\1\35\1\75\1\32\1\64\1\60\1\51\1\36\1\34\1\33\1\53\1\61\1\52\1\26\1\31\1\44"+
    "\1\63\1\62\1\40\1\54\1\57\1\0\1\121\1\0\1\66\6\0\1\2\242\0\2\2\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\5\5\1\6\7\5"+
    "\1\7\5\5\2\10\5\5\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\3\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\1\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\0\1\36\4\0\1\37\1\5"+
    "\1\40\1\41\1\42\1\43\3\5\1\44\14\5\1\45"+
    "\5\13\1\40\3\5\1\43\2\5\1\41\5\5\2\0"+
    "\1\46\1\47\5\5\1\13\1\50\2\0\1\16\1\0"+
    "\1\51\5\0\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\3\0\1\5\1\63\1\64\4\5"+
    "\1\65\2\5\1\66\1\67\4\5\1\0\5\13\5\5"+
    "\1\70\5\5\1\70\1\5\1\10\1\47\1\0\1\71"+
    "\6\0\1\72\12\5\1\45\1\0\2\13\1\73\4\5"+
    "\1\74\5\5\3\0\11\5\1\66\2\5\3\0\7\5"+
    "\1\0\1\75\1\76\1\77\2\5\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\123\0\246\0\123\0\371\0\u014c\0\u019f\0\u01f2"+
    "\0\u0245\0\u0298\0\u02eb\0\u033e\0\u0391\0\u03e4\0\u0437\0\u048a"+
    "\0\u04dd\0\u0530\0\u0583\0\u05d6\0\u0629\0\u067c\0\u06cf\0\u0722"+
    "\0\u0775\0\u07c8\0\u081b\0\u086e\0\u08c1\0\u0914\0\u0967\0\u09ba"+
    "\0\u019f\0\123\0\u0a0d\0\u0a60\0\123\0\u0ab3\0\123\0\u0b06"+
    "\0\u0b59\0\u0bac\0\123\0\123\0\123\0\123\0\123\0\u0bff"+
    "\0\u0c52\0\u0ca5\0\u0cf8\0\123\0\123\0\123\0\u0d4b\0\u0d9e"+
    "\0\u0df1\0\u0e44\0\123\0\u0e97\0\u0eea\0\u0f3d\0\u0f90\0\123"+
    "\0\u0fe3\0\123\0\u019f\0\u019f\0\u019f\0\u1036\0\u1089\0\u10dc"+
    "\0\u033e\0\u112f\0\u1182\0\u11d5\0\u1228\0\u127b\0\u12ce\0\u1321"+
    "\0\u1374\0\u13c7\0\u141a\0\u146d\0\u14c0\0\u1513\0\u1566\0\u15b9"+
    "\0\u160c\0\u165f\0\u16b2\0\u1513\0\u1705\0\u1758\0\u17ab\0\u0967"+
    "\0\u17fe\0\u1851\0\u18a4\0\u18f7\0\u194a\0\u199d\0\u19f0\0\u1a43"+
    "\0\u1a96\0\u1ae9\0\u1a96\0\123\0\u1b3c\0\u1b8f\0\u1be2\0\u1c35"+
    "\0\u1c88\0\u1cdb\0\u0a0d\0\u1d2e\0\u1d81\0\u1dd4\0\u1e27\0\123"+
    "\0\u1e7a\0\u1ecd\0\u1f20\0\u0bac\0\u1f73\0\123\0\123\0\123"+
    "\0\123\0\123\0\123\0\123\0\123\0\123\0\u1fc6\0\u2019"+
    "\0\u206c\0\u20bf\0\u019f\0\u019f\0\u2112\0\u2165\0\u21b8\0\u220b"+
    "\0\u225e\0\u22b1\0\u2304\0\u019f\0\u019f\0\u2357\0\u23aa\0\u23fd"+
    "\0\u2450\0\u24a3\0\u24f6\0\u2549\0\u259c\0\u25ef\0\u2642\0\u2695"+
    "\0\u26e8\0\u273b\0\u278e\0\u27e1\0\u019f\0\u2834\0\u2887\0\u28da"+
    "\0\u292d\0\u2980\0\u29d3\0\u2a26\0\u1d2e\0\u1d81\0\u2a79\0\123"+
    "\0\u2acc\0\u2b1f\0\u2b72\0\u2bc5\0\u2c18\0\u2c6b\0\u019f\0\u2cbe"+
    "\0\u2d11\0\u2d64\0\u2db7\0\u2e0a\0\u2e5d\0\u2eb0\0\u2f03\0\u2f56"+
    "\0\u2fa9\0\u2ffc\0\u2ffc\0\u304f\0\u30a2\0\u0a0d\0\u30f5\0\u3148"+
    "\0\u319b\0\u31ee\0\u019f\0\u3241\0\u3294\0\u32e7\0\u333a\0\u338d"+
    "\0\u33e0\0\u3433\0\u3486\0\u34d9\0\u352c\0\u357f\0\u35d2\0\u3625"+
    "\0\u3678\0\u36cb\0\u371e\0\u3771\0\u0fe3\0\u37c4\0\u3817\0\u386a"+
    "\0\u38bd\0\u3910\0\u3963\0\u39b6\0\u3a09\0\u3a5c\0\u3aaf\0\u3b02"+
    "\0\u3b55\0\u3ba8\0\123\0\123\0\u019f\0\u3bfb\0\u3c4e\0\123";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\2\7\1\11\1\12\2\7\1\10\3\7\1\13"+
    "\1\14\1\15\1\16\1\17\1\7\1\20\1\21\1\7"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\3\33\1\34\1\35\2\7\1\10\3\7\1\36"+
    "\1\37\1\7\1\40\1\41\1\42\1\43\1\7\1\44"+
    "\1\45\1\46\1\33\2\7\1\47\1\50\1\2\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\124\0\1\3\1\0\1\3\123\0\1\4\117\0\1\72"+
    "\1\0\3\72\1\73\1\74\4\0\1\75\1\0\1\76"+
    "\1\0\1\77\11\0\1\74\5\0\1\76\1\75\1\77"+
    "\52\0\1\100\14\0\16\7\1\0\17\7\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\3\7\1\103"+
    "\3\7\1\104\6\7\1\0\12\7\1\104\4\7\4\101"+
    "\1\103\4\7\1\103\7\7\1\101\3\7\1\102\2\101"+
    "\1\103\1\7\33\0\3\7\1\103\1\7\1\105\1\7"+
    "\1\104\4\7\1\105\1\7\1\0\3\7\1\105\1\7"+
    "\1\105\4\7\1\104\1\105\1\7\1\105\1\7\4\101"+
    "\1\103\2\7\2\105\1\103\1\105\1\7\2\105\3\7"+
    "\1\101\3\7\1\102\2\101\1\103\1\7\33\0\2\7"+
    "\1\106\2\7\1\106\3\7\1\106\4\7\1\0\2\7"+
    "\1\106\10\7\3\106\1\7\4\101\4\7\1\106\10\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\2\7\1\107"+
    "\2\7\1\107\1\110\2\7\1\107\4\7\1\0\1\7"+
    "\1\110\1\107\10\7\3\107\1\7\4\101\4\7\1\107"+
    "\10\7\1\101\3\7\1\102\2\101\2\7\24\0\4\111"+
    "\2\0\115\111\7\0\16\7\1\0\1\7\1\112\1\7"+
    "\1\113\13\7\4\101\15\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\2\7\1\106\2\7\1\106\3\7\1\106"+
    "\4\7\1\0\2\7\1\106\3\7\1\114\3\7\1\115"+
    "\3\106\1\7\4\101\4\7\1\106\10\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\3\7\1\103\3\7\1\104"+
    "\6\7\1\0\5\7\1\116\4\7\1\104\4\7\4\101"+
    "\1\103\1\7\1\117\2\7\1\103\7\7\1\101\3\7"+
    "\1\102\2\101\1\103\1\7\33\0\16\7\1\0\6\7"+
    "\1\120\1\7\1\121\6\7\4\101\15\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\17\7\4\101"+
    "\1\7\1\122\13\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\17\7\4\101\1\123\1\124\13\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\5\7\1\125\11\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\24\0\7\126\16\43\1\126\3\43\1\127"+
    "\5\43\1\130\1\43\1\131\1\43\1\132\1\43\4\133"+
    "\14\43\1\130\1\133\3\130\1\134\2\133\2\43\24\126"+
    "\7\0\16\7\1\0\5\7\1\135\6\7\1\136\2\7"+
    "\4\101\1\7\1\137\13\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\3\7\1\103\1\7\1\105\1\7\1\104"+
    "\4\7\1\105\1\7\1\0\1\7\1\120\1\7\1\105"+
    "\1\7\1\105\4\7\1\104\1\105\1\7\1\105\1\7"+
    "\4\101\1\103\2\7\2\105\1\103\1\105\1\7\1\105"+
    "\1\140\3\7\1\101\3\7\1\102\2\101\1\103\1\7"+
    "\33\0\3\7\1\103\3\7\1\104\6\7\1\0\12\7"+
    "\1\104\1\141\1\7\1\142\1\7\4\101\1\143\4\7"+
    "\1\103\7\7\1\101\3\7\1\102\2\101\1\103\1\7"+
    "\33\0\3\7\1\103\3\7\1\104\6\7\1\0\4\7"+
    "\1\144\1\7\1\145\3\7\1\104\4\7\4\101\1\103"+
    "\2\7\1\146\1\7\1\103\7\7\1\101\3\7\1\102"+
    "\2\101\1\103\1\7\33\0\16\7\1\0\1\147\16\7"+
    "\4\101\2\7\1\150\12\7\1\101\3\7\1\102\2\101"+
    "\2\7\35\0\1\151\2\0\2\151\1\0\2\151\6\0"+
    "\2\151\6\0\1\152\1\0\2\151\1\153\1\0\1\32"+
    "\3\33\4\0\1\151\15\0\1\32\1\33\1\154\36\0"+
    "\1\151\2\0\2\151\1\0\2\151\6\0\2\151\6\0"+
    "\1\152\1\0\3\151\1\0\4\33\4\0\1\151\15\0"+
    "\2\33\1\154\34\0\16\7\1\0\4\7\1\155\1\156"+
    "\11\7\4\101\15\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\2\7\1\107\2\7\1\107\1\110\2\7\1\107"+
    "\4\7\1\0\1\7\1\157\1\107\10\7\3\107\1\7"+
    "\4\101\4\7\1\107\10\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\17\7\4\101\11\7\1\37"+
    "\3\7\1\101\3\7\1\102\2\101\2\7\33\0\16\7"+
    "\1\0\5\7\1\160\11\7\4\101\15\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\10\7\1\161"+
    "\6\7\4\101\15\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\43\1\0\17\43\4\162\15\43\1\162\3\43"+
    "\1\102\2\162\2\43\33\0\16\43\1\0\17\43\4\162"+
    "\15\43\1\162\2\43\1\163\1\102\2\162\2\43\35\0"+
    "\1\151\2\0\1\164\1\151\1\0\2\151\6\0\2\151"+
    "\6\0\1\152\1\165\1\164\2\151\1\0\4\33\4\0"+
    "\1\151\15\0\1\166\1\33\1\154\25\0\100\167\1\170"+
    "\1\171\21\167\101\172\1\173\1\170\20\172\101\174\1\175"+
    "\1\174\1\170\17\174\111\0\1\176\122\0\1\177\122\0"+
    "\1\200\1\0\1\201\120\0\1\202\2\0\1\203\126\0"+
    "\1\204\123\0\1\205\123\0\1\206\1\0\1\72\1\0"+
    "\3\72\1\0\1\74\4\0\1\75\1\0\1\76\1\0"+
    "\1\77\11\0\1\74\5\0\1\76\1\75\1\77\70\0"+
    "\1\207\3\0\1\75\3\0\1\77\13\0\1\207\4\0"+
    "\1\75\1\77\75\0\1\210\11\0\1\210\107\0\1\75"+
    "\24\0\1\75\102\0\1\211\4\0\1\211\103\0\16\101"+
    "\1\0\37\101\1\212\1\101\1\212\2\101\1\102\4\101"+
    "\33\0\7\7\1\213\6\7\1\0\12\7\1\213\4\7"+
    "\4\101\15\7\1\101\3\7\1\102\2\101\2\7\33\0"+
    "\7\7\1\214\6\7\1\0\12\7\1\214\4\7\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\33\0\12\7"+
    "\1\215\3\7\1\0\1\215\16\7\4\101\15\7\1\101"+
    "\3\7\1\102\2\101\2\7\33\0\16\7\1\0\2\7"+
    "\1\216\4\7\1\217\7\7\4\101\15\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\17\7\4\101"+
    "\1\7\1\220\13\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\13\7\1\221\3\7\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\3\7\1\222\13\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\10\7\1\223\2\7"+
    "\1\147\3\7\4\101\15\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\16\7\1\224\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\2\7\1\225\14\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\17\7\4\101\2\7"+
    "\1\226\12\7\1\101\3\7\1\102\2\101\2\7\33\0"+
    "\16\7\1\0\7\7\1\224\7\7\4\101\15\7\1\101"+
    "\3\7\1\102\2\101\2\7\33\0\16\7\1\0\5\7"+
    "\1\227\11\7\4\101\15\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\5\7\1\230\11\7\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\33\0\16\7"+
    "\1\0\13\7\1\231\3\7\4\101\12\7\1\225\2\7"+
    "\1\101\3\7\1\102\2\101\2\7\41\0\1\232\11\0"+
    "\1\232\15\0\4\126\22\0\2\126\35\0\16\43\1\0"+
    "\1\43\1\233\15\43\4\162\15\43\1\162\3\43\1\102"+
    "\2\162\2\43\33\0\6\43\1\234\7\43\1\0\1\43"+
    "\1\234\15\43\4\133\15\43\1\162\3\43\1\102\2\133"+
    "\2\43\33\0\16\43\1\0\14\43\1\235\2\43\4\162"+
    "\15\43\1\162\3\43\1\102\2\162\2\43\33\0\16\43"+
    "\1\0\1\236\16\43\4\162\15\43\1\162\3\43\1\102"+
    "\2\162\2\43\33\0\6\162\1\237\7\162\1\0\1\162"+
    "\1\237\15\162\4\133\14\162\1\0\1\162\1\0\2\162"+
    "\1\102\2\133\2\162\33\0\16\7\1\0\17\7\4\101"+
    "\1\7\1\225\13\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\2\7\1\240\14\7\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\1\7\1\241\15\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\13\7\1\225\3\7"+
    "\4\101\15\7\1\101\3\7\1\102\2\101\2\7\33\0"+
    "\16\7\1\0\1\242\16\7\4\101\15\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\4\7\1\243"+
    "\12\7\4\101\15\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\3\7\1\244\13\7\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\13\7\1\245\3\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\3\7\1\246\13\7"+
    "\4\101\15\7\1\101\3\7\1\102\2\101\2\7\33\0"+
    "\16\7\1\0\1\7\1\247\15\7\4\101\15\7\1\101"+
    "\3\7\1\102\2\101\2\7\33\0\16\7\1\0\17\7"+
    "\4\101\2\7\1\250\12\7\1\101\3\7\1\102\2\101"+
    "\2\7\35\0\1\151\2\0\2\151\1\0\2\151\6\0"+
    "\2\151\10\0\3\151\1\0\4\151\4\0\1\151\15\0"+
    "\2\151\1\154\25\0\7\126\16\0\1\126\11\0\1\126"+
    "\5\0\4\126\14\0\10\126\2\0\24\126\7\0\16\7"+
    "\1\0\15\7\1\251\1\7\4\101\15\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\2\7\1\252"+
    "\14\7\4\101\15\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\12\7\1\215\3\7\1\0\1\215\16\7\4\101"+
    "\2\7\1\253\12\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\17\7\4\101\1\7\1\254\13\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\17\7\4\101\2\7\1\225\12\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\162\1\0\37\162\1\0\1\162"+
    "\1\0\2\162\1\102\4\162\35\0\1\151\2\0\2\151"+
    "\1\0\2\151\6\0\2\151\10\0\3\151\1\0\4\255"+
    "\4\0\1\151\15\0\2\255\1\154\36\0\1\256\2\0"+
    "\2\256\1\0\2\256\6\0\2\256\10\0\3\256\1\0"+
    "\4\256\4\0\1\256\15\0\2\256\37\0\1\151\2\0"+
    "\2\151\1\0\2\151\6\0\2\151\6\0\1\152\1\0"+
    "\3\151\1\0\4\33\4\0\1\151\15\0\1\166\1\33"+
    "\1\154\25\0\100\257\1\260\1\261\21\257\2\167\4\0"+
    "\115\167\101\262\1\263\1\260\20\262\2\172\4\0\115\172"+
    "\2\174\4\0\115\174\11\0\1\264\16\0\1\264\111\0"+
    "\1\265\124\0\1\266\4\0\1\266\103\0\16\212\1\0"+
    "\44\212\1\0\4\212\33\0\5\7\1\267\6\7\1\267"+
    "\1\7\1\0\3\7\1\267\1\7\1\267\5\7\1\267"+
    "\1\7\1\267\1\7\4\101\3\7\2\267\1\7\1\267"+
    "\1\7\2\267\3\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\3\7\1\270\13\7\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\10\7\1\271\6\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\16\7\1\272\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\33\0\16\7"+
    "\1\0\1\273\16\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\1\7\1\274\15\7"+
    "\4\101\15\7\1\101\3\7\1\102\2\101\2\7\33\0"+
    "\16\7\1\0\10\7\1\275\6\7\4\101\15\7\1\101"+
    "\3\7\1\102\2\101\2\7\33\0\16\7\1\0\5\7"+
    "\1\276\11\7\4\101\15\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\15\7\1\277\1\7\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\33\0\16\7"+
    "\1\0\16\7\1\300\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\16\7\1\301\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\71\0\4\302"+
    "\22\0\2\302\2\0\1\303\15\0\1\303\14\0\16\43"+
    "\1\0\12\43\1\304\4\43\4\162\15\43\1\162\3\43"+
    "\1\102\2\162\2\43\33\0\16\43\1\0\17\43\4\162"+
    "\15\43\1\162\3\43\1\102\2\162\2\43\1\303\15\0"+
    "\1\303\14\0\16\43\1\0\3\43\1\305\13\43\4\162"+
    "\15\43\1\162\3\43\1\102\2\162\2\43\33\0\16\43"+
    "\1\0\1\306\16\43\4\162\15\43\1\162\3\43\1\102"+
    "\2\162\2\43\33\0\16\162\1\0\37\162\1\0\1\162"+
    "\1\0\2\162\1\102\4\162\1\303\15\0\1\303\14\0"+
    "\16\7\1\0\17\7\4\101\10\7\1\307\4\7\1\101"+
    "\3\7\1\102\2\101\2\7\33\0\16\7\1\0\17\7"+
    "\4\101\1\310\14\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\5\7\1\311\11\7\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\7\7\1\312\7\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\1\247\16\7\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\33\0\16\7"+
    "\1\0\1\7\1\313\15\7\4\101\15\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\17\7\1\314"+
    "\1\101\1\315\1\101\15\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\1\7\1\316\15\7\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\33\0\16\7"+
    "\1\0\17\7\4\101\1\7\1\317\13\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\17\7\4\101"+
    "\7\7\1\245\5\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\1\7\1\245\4\7\1\320\10\7"+
    "\4\101\6\7\1\245\6\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\13\7\1\313\3\7\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\24\0\100\257"+
    "\1\170\1\261\23\257\4\0\115\257\101\262\1\263\1\170"+
    "\22\262\4\0\115\262\12\0\1\321\36\0\1\321\60\0"+
    "\1\322\22\0\1\322\77\0\1\323\22\0\1\323\77\0"+
    "\16\7\1\0\4\7\1\324\12\7\4\101\15\7\1\101"+
    "\3\7\1\102\2\101\2\7\33\0\16\7\1\0\1\7"+
    "\1\325\15\7\4\101\15\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\2\7\1\224\14\7\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\33\0\16\7"+
    "\1\0\3\7\1\113\13\7\4\101\15\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\17\7\4\101"+
    "\1\7\1\326\13\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\5\7\1\312\11\7\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\17\7\4\101\1\7\1\327\13\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\14\7\1\330\2\7"+
    "\4\101\15\7\1\101\3\7\1\102\2\101\2\7\33\0"+
    "\16\7\1\0\17\7\4\101\2\7\1\224\12\7\1\101"+
    "\3\7\1\102\2\101\2\7\33\0\16\7\1\0\17\7"+
    "\4\101\1\331\14\7\1\101\3\7\1\102\2\101\2\7"+
    "\71\0\4\302\22\0\2\302\35\0\16\43\1\0\3\43"+
    "\1\306\13\43\4\162\15\43\1\162\3\43\1\102\2\162"+
    "\2\43\33\0\16\43\1\0\14\43\1\306\2\43\4\162"+
    "\15\43\1\162\3\43\1\102\2\162\2\43\33\0\16\7"+
    "\1\0\16\7\1\332\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\1\7\1\333\15\7"+
    "\4\101\15\7\1\101\3\7\1\102\2\101\2\7\33\0"+
    "\16\7\1\0\17\7\4\101\1\334\14\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\6\7\1\224"+
    "\10\7\4\101\15\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\101\1\0\20\101\1\335\16\101\1\212\1\101"+
    "\1\212\2\101\1\102\4\101\33\0\16\101\1\0\22\101"+
    "\1\335\14\101\1\212\1\101\1\212\2\101\1\102\4\101"+
    "\33\0\16\7\1\0\17\7\4\101\1\7\1\336\13\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\14\7\1\337\2\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\1\7\1\245\15\7"+
    "\4\101\6\7\1\245\6\7\1\101\3\7\1\102\2\101"+
    "\2\7\37\0\1\340\30\0\1\340\66\0\1\341\23\0"+
    "\1\341\110\0\1\342\12\0\1\342\74\0\16\7\1\0"+
    "\5\7\1\343\11\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\6\7\1\344\10\7"+
    "\4\101\15\7\1\101\3\7\1\102\2\101\2\7\33\0"+
    "\16\7\1\0\6\7\1\277\10\7\4\101\15\7\1\101"+
    "\3\7\1\102\2\101\2\7\33\0\16\7\1\0\3\7"+
    "\1\224\13\7\4\101\15\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\17\7\4\101\1\224\14\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\1\7\1\224\15\7\4\101\15\7\1\101\3\7\1\102"+
    "\2\101\2\7\33\0\16\7\1\0\4\7\1\345\12\7"+
    "\4\101\15\7\1\101\3\7\1\102\2\101\2\7\33\0"+
    "\16\7\1\0\14\7\1\346\2\7\4\101\15\7\1\101"+
    "\3\7\1\102\2\101\2\7\33\0\16\7\1\0\16\7"+
    "\1\347\4\101\15\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\2\7\1\350\14\7\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\17\7\4\101\1\7\1\351\13\7\1\101\3\7\1\102"+
    "\2\101\2\7\40\0\1\352\24\0\1\352\76\0\1\353"+
    "\11\0\1\353\103\0\1\354\23\0\1\354\75\0\16\7"+
    "\1\0\6\7\1\355\10\7\4\101\15\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\3\7\1\355"+
    "\13\7\4\101\15\7\1\101\3\7\1\102\2\101\2\7"+
    "\33\0\16\7\1\0\17\7\4\101\1\7\1\356\13\7"+
    "\1\101\3\7\1\102\2\101\2\7\33\0\16\7\1\0"+
    "\1\356\16\7\4\101\15\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\3\7\1\331\13\7\4\101"+
    "\15\7\1\101\3\7\1\102\2\101\2\7\33\0\16\7"+
    "\1\0\14\7\1\357\2\7\4\101\15\7\1\101\3\7"+
    "\1\102\2\101\2\7\33\0\16\7\1\0\17\7\4\101"+
    "\3\7\1\224\11\7\1\101\3\7\1\102\2\101\2\7"+
    "\41\0\1\360\11\0\1\360\102\0\16\7\1\0\1\7"+
    "\1\245\15\7\4\101\15\7\1\101\3\7\1\102\2\101"+
    "\2\7\33\0\16\7\1\0\1\331\16\7\4\101\15\7"+
    "\1\101\3\7\1\102\2\101\2\7\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15521];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\35\1\1\11\2\1\1\11"+
    "\1\1\1\11\3\1\5\11\4\1\3\11\3\1\1\0"+
    "\1\11\4\0\1\11\1\1\1\11\46\1\2\0\1\1"+
    "\1\11\7\1\2\0\1\1\1\0\1\11\5\0\11\11"+
    "\3\0\20\1\1\0\24\1\1\0\1\11\6\0\14\1"+
    "\1\0\15\1\3\0\14\1\3\0\7\1\1\0\2\11"+
    "\3\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[240];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _NasmLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _NasmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 65: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 66: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 67: break;
          case 4: 
            { return PERCENT;
            } 
            // fall through
          case 68: break;
          case 5: 
            { return ID;
            } 
            // fall through
          case 69: break;
          case 6: 
            { return SEMICOLON;
            } 
            // fall through
          case 70: break;
          case 7: 
            { return DOT;
            } 
            // fall through
          case 71: break;
          case 8: 
            { return DECIMAL;
            } 
            // fall through
          case 72: break;
          case 9: 
            { return QUESTION;
            } 
            // fall through
          case 73: break;
          case 10: 
            { return BITWISE_NOT;
            } 
            // fall through
          case 74: break;
          case 11: 
            { return LBL;
            } 
            // fall through
          case 75: break;
          case 12: 
            { return DOLLARSIGN;
            } 
            // fall through
          case 76: break;
          case 13: 
            { return COLON;
            } 
            // fall through
          case 77: break;
          case 14: 
            { return ZEROES;
            } 
            // fall through
          case 78: break;
          case 15: 
            { return MINUS;
            } 
            // fall through
          case 79: break;
          case 16: 
            { return SQUARE_L;
            } 
            // fall through
          case 80: break;
          case 17: 
            { return SQUARE_R;
            } 
            // fall through
          case 81: break;
          case 18: 
            { return ROUND_L;
            } 
            // fall through
          case 82: break;
          case 19: 
            { return ROUND_R;
            } 
            // fall through
          case 83: break;
          case 20: 
            { return SEPARATOR;
            } 
            // fall through
          case 84: break;
          case 21: 
            { return EQUAL;
            } 
            // fall through
          case 85: break;
          case 22: 
            { return GREATERTHAN;
            } 
            // fall through
          case 86: break;
          case 23: 
            { return LESSTHAN;
            } 
            // fall through
          case 87: break;
          case 24: 
            { return PLUS;
            } 
            // fall through
          case 88: break;
          case 25: 
            { return TIMES;
            } 
            // fall through
          case 89: break;
          case 26: 
            { return DIVIDE;
            } 
            // fall through
          case 90: break;
          case 27: 
            { return BITWISE_AND;
            } 
            // fall through
          case 91: break;
          case 28: 
            { return BITWISE_OR;
            } 
            // fall through
          case 92: break;
          case 29: 
            { return BITWISE_XOR;
            } 
            // fall through
          case 93: break;
          case 30: 
            { return PERCENT2;
            } 
            // fall through
          case 94: break;
          case 31: 
            { return TOKEN_CONCAT;
            } 
            // fall through
          case 95: break;
          case 32: 
            { return LBL_DEF;
            } 
            // fall through
          case 96: break;
          case 33: 
            { return REG_8;
            } 
            // fall through
          case 97: break;
          case 34: 
            { return REG_16;
            } 
            // fall through
          case 98: break;
          case 35: 
            { return DATA_DEF;
            } 
            // fall through
          case 99: break;
          case 36: 
            { return COMMENT;
            } 
            // fall through
          case 100: break;
          case 37: 
            { return FLOAT_DECIMAL;
            } 
            // fall through
          case 101: break;
          case 38: 
            { return BINARY;
            } 
            // fall through
          case 102: break;
          case 39: 
            { return HEXADECIMAL;
            } 
            // fall through
          case 103: break;
          case 40: 
            { return DOLLARSIGN2;
            } 
            // fall through
          case 104: break;
          case 41: 
            { return STRING;
            } 
            // fall through
          case 105: break;
          case 42: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 106: break;
          case 43: 
            { return NOTEQUAL;
            } 
            // fall through
          case 107: break;
          case 44: 
            { return GREATERTHANOREQUAL;
            } 
            // fall through
          case 108: break;
          case 45: 
            { return BITSHIFT_R;
            } 
            // fall through
          case 109: break;
          case 46: 
            { return LESSTHANOREQUAL;
            } 
            // fall through
          case 110: break;
          case 47: 
            { return BITSHIFT_L;
            } 
            // fall through
          case 111: break;
          case 48: 
            { return LOGICAL_AND;
            } 
            // fall through
          case 112: break;
          case 49: 
            { return LOGICAL_OR;
            } 
            // fall through
          case 113: break;
          case 50: 
            { return LOGICAL_XOR;
            } 
            // fall through
          case 114: break;
          case 51: 
            { return REG_32;
            } 
            // fall through
          case 115: break;
          case 52: 
            { return REG_64;
            } 
            // fall through
          case 116: break;
          case 53: 
            { return END_DIRECTIVE_OP;
            } 
            // fall through
          case 117: break;
          case 54: 
            { return DIRECTIVE_OP;
            } 
            // fall through
          case 118: break;
          case 55: 
            { return GENERAL_OP;
            } 
            // fall through
          case 119: break;
          case 56: 
            { return OP_PREFIX;
            } 
            // fall through
          case 120: break;
          case 57: 
            { return CHARACTER;
            } 
            // fall through
          case 121: break;
          case 58: 
            { return DATA_RES;
            } 
            // fall through
          case 122: break;
          case 59: 
            { return SECTION_NAME;
            } 
            // fall through
          case 123: break;
          case 60: 
            { return SIZE_PREFIX;
            } 
            // fall through
          case 124: break;
          case 61: 
            { return DEFINE_TAG;
            } 
            // fall through
          case 125: break;
          case 62: 
            { return ASSIGN_TAG;
            } 
            // fall through
          case 126: break;
          case 63: 
            { return SECTION_DEF;
            } 
            // fall through
          case 127: break;
          case 64: 
            { return INCLUDE_TAG;
            } 
            // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
