/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.andreybotanic.asm.nasm;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.andreybotanic.asm.nasm.psi.NasmTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_NasmLexer.flex</tt>
 */
public class _NasmLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\1\1\4\2\3\1\5\22\0\1\1\1\74\1\65\1\47\1\51\1\105\1\102\1\64\1\70\1"+
    "\71\1\100\1\77\1\72\1\61\1\23\1\101\1\53\1\30\1\33\1\32\2\54\1\31\3\54\1\52"+
    "\1\13\1\76\1\73\1\75\1\45\1\47\3\55\1\56\1\60\1\55\24\57\1\66\1\63\1\67\1"+
    "\104\1\50\1\62\1\25\1\26\1\14\1\6\1\11\1\55\1\21\1\37\1\16\1\44\1\41\1\34"+
    "\1\22\1\20\1\17\1\35\1\42\1\10\1\12\1\15\1\27\1\43\1\7\1\24\1\36\1\40\1\0"+
    "\1\103\1\0\1\46\6\0\1\2\242\0\2\2\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\5\4\1\5\6\4\1\6"+
    "\4\4\2\7\3\4\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\3\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\1\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\2\36\1\4\1\37\1\4\1\40"+
    "\1\41\10\4\1\42\7\4\1\43\5\12\1\41\5\4"+
    "\1\40\5\4\2\0\1\44\1\45\3\4\1\12\1\46"+
    "\2\0\1\15\1\0\1\47\5\0\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\2\4\1\64\1\4\1\65\1\66\1\67\5\4"+
    "\1\70\4\4\1\0\5\12\5\4\1\65\5\4\1\7"+
    "\1\45\1\0\1\71\3\0\1\72\1\73\13\4\1\43"+
    "\1\0\2\12\1\74\21\4\1\70\11\4\1\75\2\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\106\0\322\0\u0118\0\u015e\0\u01a4"+
    "\0\u01ea\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u0302\0\106\0\u071c\0\u0762\0\106"+
    "\0\u07a8\0\106\0\u07ee\0\u0834\0\u087a\0\106\0\106\0\106"+
    "\0\106\0\106\0\u08c0\0\u0906\0\u094c\0\u0992\0\106\0\106"+
    "\0\106\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa\0\u0302\0\u015e\0\u0af0"+
    "\0\u0302\0\u0b36\0\u0302\0\106\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0276\0\u0dac\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u0f96\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252"+
    "\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482"+
    "\0\u143c\0\106\0\u14c8\0\u150e\0\u1554\0\u159a\0\u071c\0\u15e0"+
    "\0\u1626\0\u166c\0\u16b2\0\106\0\u16f8\0\u173e\0\u1784\0\u087a"+
    "\0\u17ca\0\106\0\106\0\106\0\106\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\u0302\0\u1810\0\u1856\0\u0302"+
    "\0\u189c\0\u18e2\0\u0302\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40"+
    "\0\u1a86\0\u0302\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\u1be4\0\u1c2a"+
    "\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u0302\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u15e0"+
    "\0\u1626\0\u2044\0\106\0\u208a\0\u20d0\0\u2116\0\u0302\0\u0302"+
    "\0\u215c\0\u21a2\0\u21e8\0\u222e\0\u2274\0\u22ba\0\u2300\0\u2346"+
    "\0\u238c\0\u23d2\0\u2418\0\u245e\0\u245e\0\u24a4\0\u24ea\0\u071c"+
    "\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u271a"+
    "\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be\0\u2904\0\u294a"+
    "\0\u2990\0\u0b36\0\u29d6\0\u2a1c\0\u2a62\0\u2aa8\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u2c06\0\u0302\0\u2c4c\0\u2c92";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\15\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\3\30\1\31\5\15\1\32\1\15\1\33\1\34"+
    "\1\35\1\36\1\15\1\37\1\40\1\41\1\30\4\15"+
    "\1\42\1\43\1\2\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\107\0\1\3\1\0"+
    "\1\3\106\0\1\4\107\0\1\66\1\67\1\15\1\70"+
    "\1\15\1\0\1\15\1\66\1\15\1\66\4\15\1\71"+
    "\1\15\1\66\1\15\4\72\1\73\1\15\1\66\1\73"+
    "\1\66\1\15\1\66\3\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\3\15\1\75\10\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\1\76"+
    "\2\15\1\77\1\15\1\0\1\76\10\15\2\76\1\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\1\100\4\15\1\0\1\100\3\15\1\101\3\15\1\102"+
    "\2\100\1\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\3\15\1\103\1\15\1\0\1\15\1\104"+
    "\12\15\4\72\12\15\1\72\3\15\1\74\2\72\4\15"+
    "\25\0\4\105\2\0\100\105\6\0\5\15\1\0\3\15"+
    "\1\106\4\15\1\71\3\15\4\72\1\73\1\107\1\15"+
    "\1\73\6\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\14\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\5\15\1\0\4\15\1\70\1\15"+
    "\1\110\5\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\2\15\1\111\2\15\1\0\14\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\2\15"+
    "\1\112\2\15\1\0\14\15\4\72\1\113\11\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\5\15\1\0\3\15"+
    "\1\114\10\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\25\0\6\115\1\116\4\36\1\115\1\36\1\117"+
    "\5\36\1\120\2\36\1\121\1\36\4\122\11\36\1\120"+
    "\1\122\3\120\1\123\2\122\4\36\25\115\6\0\2\15"+
    "\1\124\2\15\1\0\3\15\1\125\5\15\1\126\2\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\1\127\4\15\1\0\10\15\1\71\1\15\1\130\1\15"+
    "\4\72\1\131\2\15\1\73\6\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\5\15\1\0\2\15\1\132\1\15"+
    "\1\133\3\15\1\71\3\15\4\72\1\73\1\15\1\134"+
    "\1\73\6\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\4\15\1\135\1\0\14\15\4\72\1\15\1\136\10\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\1\137\2\0"+
    "\1\137\2\0\1\137\6\0\1\140\1\0\1\137\1\141"+
    "\1\0\1\27\3\30\3\0\1\142\13\0\1\27\1\30"+
    "\2\137\1\0\1\137\33\0\1\137\2\0\1\137\2\0"+
    "\1\137\6\0\1\140\1\0\2\137\1\0\4\30\3\0"+
    "\1\142\13\0\2\30\2\137\1\0\1\137\33\0\5\15"+
    "\1\0\2\15\1\143\1\144\10\15\4\72\12\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\1\15\1\7\3\15"+
    "\1\0\14\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\6\15\1\145\5\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\5\36"+
    "\1\0\14\36\4\146\12\36\1\146\3\36\1\74\2\146"+
    "\4\36\33\0\5\36\1\0\14\36\4\146\12\36\1\146"+
    "\2\36\1\147\1\74\2\146\4\36\33\0\1\150\2\0"+
    "\1\137\2\0\1\137\6\0\1\140\1\151\2\137\1\0"+
    "\4\30\3\0\1\142\13\0\1\152\1\30\1\137\1\150"+
    "\1\0\1\137\25\0\62\153\1\154\1\155\22\153\63\156"+
    "\1\157\1\154\21\156\63\160\1\161\1\160\1\154\20\160"+
    "\73\0\1\162\105\0\1\163\105\0\1\164\1\0\1\165"+
    "\103\0\1\166\2\0\1\167\111\0\1\170\106\0\1\171"+
    "\106\0\1\172\100\0\1\173\5\0\1\174\6\0\5\15"+
    "\1\0\1\175\13\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\5\72\1\0\31\72\1\176\1\72"+
    "\1\176\2\72\1\74\6\72\33\0\2\15\1\177\2\15"+
    "\1\0\14\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\10\15\1\200\3\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\4\15"+
    "\1\201\1\0\14\15\4\72\1\15\1\202\10\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\5\15\1\0\10\15"+
    "\1\203\3\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\1\204\4\15\1\0\14\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\5\15\1\0"+
    "\1\15\1\205\12\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\5\15\1\0\1\206\4\15\1\207"+
    "\6\15\4\72\12\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\2\15\1\210\2\15\1\0\14\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\1\135\4\15"+
    "\1\0\6\15\1\211\5\15\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\5\15\1\0\13\15\1\212"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\14\15\4\72\1\15\1\213\10\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\5\15\1\0\5\15"+
    "\1\212\6\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\3\15\1\214\10\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\5\15"+
    "\1\0\3\15\1\215\10\15\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\1\216\4\15\1\0\14\15"+
    "\4\72\7\15\1\175\2\15\1\72\3\15\1\74\2\72"+
    "\4\15\36\0\1\217\16\0\4\115\17\0\2\115\3\0"+
    "\1\217\33\0\5\36\1\0\11\36\1\220\2\36\4\146"+
    "\12\36\1\146\3\36\1\74\2\146\4\36\33\0\3\36"+
    "\1\221\1\36\1\0\14\36\4\146\12\36\1\146\3\36"+
    "\1\74\2\146\4\36\33\0\3\36\1\222\1\36\1\0"+
    "\14\36\4\122\12\36\1\146\3\36\1\74\2\122\3\36"+
    "\1\222\33\0\4\36\1\223\1\0\14\36\4\146\12\36"+
    "\1\146\3\36\1\74\2\146\4\36\33\0\3\146\1\224"+
    "\1\146\1\0\14\146\4\122\11\146\1\0\1\146\1\0"+
    "\2\146\1\74\2\122\3\146\1\224\33\0\3\15\1\225"+
    "\1\15\1\0\14\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\2\15\1\175\2\15\1\0\14\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\1\226\13\15\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\1\175\4\15\1\0\14\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\4\15\1\227\1\0\14\15\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\5\15\1\0\2\15\1\230"+
    "\11\15\4\72\12\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\5\15\1\0\1\15\1\231\12\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\1\232\4\15"+
    "\1\0\14\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\1\15\1\233\12\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\3\15"+
    "\1\234\1\15\1\0\14\15\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\5\15\1\0\14\15\4\72"+
    "\1\15\1\235\10\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\1\137\2\0\1\137\2\0\1\137\10\0\2\137"+
    "\1\0\4\137\3\0\1\142\13\0\4\137\1\0\1\137"+
    "\25\0\6\115\5\0\1\115\7\0\1\115\4\0\4\115"+
    "\11\0\10\115\4\0\25\115\6\0\5\15\1\0\12\15"+
    "\1\236\1\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\1\237\13\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\5\15\1\0"+
    "\14\15\4\72\1\15\1\175\10\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\5\146\1\0\31\146\1\0\1\146"+
    "\1\0\2\146\1\74\6\146\33\0\1\137\2\0\1\137"+
    "\2\0\1\137\10\0\2\137\1\0\4\240\3\0\1\142"+
    "\13\0\2\240\2\137\1\0\1\137\33\0\1\241\2\0"+
    "\1\241\2\0\1\241\10\0\2\241\1\0\4\241\17\0"+
    "\4\241\1\0\1\241\33\0\1\137\2\0\1\137\2\0"+
    "\1\137\6\0\1\140\1\0\2\137\1\0\4\30\3\0"+
    "\1\142\13\0\1\152\1\30\2\137\1\0\1\137\25\0"+
    "\62\242\1\243\1\244\22\242\2\153\4\0\100\153\63\245"+
    "\1\246\1\243\21\245\2\156\4\0\100\156\2\160\4\0"+
    "\100\160\6\0\5\176\1\0\36\176\1\0\6\176\33\0"+
    "\1\247\4\15\1\0\14\15\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\2\250\3\15\1\0\1\15"+
    "\1\250\1\15\1\250\6\15\1\250\1\15\4\72\2\15"+
    "\1\250\1\15\1\250\1\15\1\250\3\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\3\15\1\232\1\15\1\0"+
    "\4\15\1\251\7\15\4\72\4\15\1\232\5\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\4\15\1\252\1\0"+
    "\14\15\4\72\12\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\3\15\1\253\1\15\1\0\14\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\5\15\1\0"+
    "\1\15\1\254\12\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\5\15\1\0\6\15\1\255\5\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\13\15\1\256\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\5\15\1\0\6\15\1\257"+
    "\5\15\4\72\12\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\5\15\1\0\3\15\1\260\10\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\5\15\1\0"+
    "\13\15\1\261\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\12\15\1\262\1\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\5\15"+
    "\1\0\13\15\1\263\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\55\0\4\264\17\0\2\264\4\0\1\265"+
    "\15\0\1\265\14\0\5\36\1\0\1\36\1\266\12\36"+
    "\4\146\12\36\1\146\3\36\1\74\2\146\4\36\33\0"+
    "\5\36\1\0\10\36\1\267\3\36\4\146\12\36\1\146"+
    "\3\36\1\74\2\146\4\36\33\0\5\36\1\0\14\36"+
    "\4\146\12\36\1\146\3\36\1\74\2\146\4\36\1\265"+
    "\15\0\1\265\14\0\4\36\1\270\1\0\14\36\4\146"+
    "\12\36\1\146\3\36\1\74\2\146\4\36\33\0\5\146"+
    "\1\0\31\146\1\0\1\146\1\0\2\146\1\74\6\146"+
    "\1\265\15\0\1\265\14\0\5\15\1\0\14\15\4\72"+
    "\1\271\11\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\14\15\4\72\6\15\1\272\3\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\5\15\1\0\3\15"+
    "\1\273\10\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\5\15\1\274\6\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\4\15"+
    "\1\234\1\0\14\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\3\15\1\247\1\15\1\0\14\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\14\15\1\275\1\72\1\276\1\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\3\15\1\277"+
    "\1\15\1\0\14\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\2\15\1\300\2\15\1\0\14\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\14\15\4\72\5\15\1\232\4\15\1\72"+
    "\3\15\1\74\2\72\4\15\25\0\62\242\1\154\1\244"+
    "\24\242\4\0\100\242\63\245\1\246\1\154\23\245\4\0"+
    "\100\245\6\0\3\15\1\232\1\15\1\0\14\15\4\72"+
    "\4\15\1\232\5\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\5\15\1\0\1\15\1\104\12\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\2\15\1\301"+
    "\2\15\1\0\14\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\5\15\1\0\2\15\1\302\11\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\3\15\1\303\1\15\1\0\14\15\4\72\12\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\5\15\1\0\1\212"+
    "\13\15\4\72\12\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\5\15\1\0\3\15\1\274\10\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\2\15\1\304"+
    "\2\15\1\0\14\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\5\15\1\0\14\15\4\72\1\15"+
    "\1\212\10\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\11\15\1\305\2\15\4\72\12\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\5\15\1\0\14\15"+
    "\4\72\1\306\11\15\1\72\3\15\1\74\2\72\4\15"+
    "\55\0\4\264\17\0\2\264\37\0\5\36\1\0\11\36"+
    "\1\270\2\36\4\146\12\36\1\146\3\36\1\74\2\146"+
    "\4\36\33\0\5\36\1\0\1\36\1\270\12\36\4\146"+
    "\12\36\1\146\3\36\1\74\2\146\4\36\33\0\3\15"+
    "\1\307\1\15\1\0\14\15\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\5\15\1\0\13\15\1\310"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\14\15\4\72\1\311\11\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\5\15\1\0\4\15\1\212"+
    "\7\15\4\72\12\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\5\72\1\0\15\72\1\312\13\72\1\176\1\72"+
    "\1\176\2\72\1\74\6\72\33\0\5\72\1\0\17\72"+
    "\1\312\11\72\1\176\1\72\1\176\2\72\1\74\6\72"+
    "\33\0\2\15\1\313\2\15\1\0\14\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\5\15\1\0"+
    "\11\15\1\314\2\15\4\72\12\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\5\15\1\0\4\15\1\262\7\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\3\15\1\315\10\15\4\72\12\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\5\15\1\0\4\15"+
    "\1\316\7\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\1\15\1\212\12\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\5\15"+
    "\1\0\14\15\4\72\1\212\11\15\1\72\3\15\1\74"+
    "\2\72\4\15\33\0\3\15\1\212\1\15\1\0\14\15"+
    "\4\72\12\15\1\72\3\15\1\74\2\72\4\15\33\0"+
    "\5\15\1\0\11\15\1\317\2\15\4\72\12\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\5\15\1\0\2\15"+
    "\1\320\11\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\13\15\1\321\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\5\15\1\0"+
    "\1\322\13\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\2\15\1\323\2\15\1\0\14\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\5\15"+
    "\1\0\4\15\1\324\7\15\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\5\15\1\0\1\15\1\324"+
    "\12\15\4\72\12\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\4\15\1\325\1\0\14\15\4\72\12\15\1\72"+
    "\3\15\1\74\2\72\4\15\33\0\2\15\1\325\2\15"+
    "\1\0\14\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\33\0\5\15\1\0\1\15\1\306\12\15\4\72"+
    "\12\15\1\72\3\15\1\74\2\72\4\15\33\0\5\15"+
    "\1\0\11\15\1\326\2\15\4\72\12\15\1\72\3\15"+
    "\1\74\2\72\4\15\33\0\5\15\1\0\14\15\4\72"+
    "\2\15\1\212\7\15\1\72\3\15\1\74\2\72\4\15"+
    "\33\0\3\15\1\232\1\15\1\0\14\15\4\72\12\15"+
    "\1\72\3\15\1\74\2\72\4\15\33\0\4\15\1\306"+
    "\1\0\14\15\4\72\12\15\1\72\3\15\1\74\2\72"+
    "\4\15\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\30\1\1\11\2\1\1\11"+
    "\1\1\1\11\3\1\5\11\4\1\3\11\12\1\1\11"+
    "\42\1\2\0\1\1\1\11\5\1\2\0\1\1\1\0"+
    "\1\11\5\0\13\11\22\1\1\0\22\1\1\0\1\11"+
    "\3\0\16\1\1\0\41\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _NasmLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _NasmLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 62: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 63: break;
          case 3: 
            { return EOL;
            } 
            // fall through
          case 64: break;
          case 4: 
            { return ID;
            } 
            // fall through
          case 65: break;
          case 5: 
            { return SEMICOLON;
            } 
            // fall through
          case 66: break;
          case 6: 
            { return DOT;
            } 
            // fall through
          case 67: break;
          case 7: 
            { return DECIMAL;
            } 
            // fall through
          case 68: break;
          case 8: 
            { return QUESTION;
            } 
            // fall through
          case 69: break;
          case 9: 
            { return BITWISE_NOT;
            } 
            // fall through
          case 70: break;
          case 10: 
            { return LBL;
            } 
            // fall through
          case 71: break;
          case 11: 
            { return DOLLARSIGN;
            } 
            // fall through
          case 72: break;
          case 12: 
            { return COLON;
            } 
            // fall through
          case 73: break;
          case 13: 
            { return ZEROES;
            } 
            // fall through
          case 74: break;
          case 14: 
            { return MINUS;
            } 
            // fall through
          case 75: break;
          case 15: 
            { return SQUARE_L;
            } 
            // fall through
          case 76: break;
          case 16: 
            { return SQUARE_R;
            } 
            // fall through
          case 77: break;
          case 17: 
            { return ROUND_L;
            } 
            // fall through
          case 78: break;
          case 18: 
            { return ROUND_R;
            } 
            // fall through
          case 79: break;
          case 19: 
            { return SEPARATOR;
            } 
            // fall through
          case 80: break;
          case 20: 
            { return EQUAL;
            } 
            // fall through
          case 81: break;
          case 21: 
            { return GREATERTHAN;
            } 
            // fall through
          case 82: break;
          case 22: 
            { return LESSTHAN;
            } 
            // fall through
          case 83: break;
          case 23: 
            { return PLUS;
            } 
            // fall through
          case 84: break;
          case 24: 
            { return TIMES;
            } 
            // fall through
          case 85: break;
          case 25: 
            { return DIVIDE;
            } 
            // fall through
          case 86: break;
          case 26: 
            { return BITWISE_AND;
            } 
            // fall through
          case 87: break;
          case 27: 
            { return BITWISE_OR;
            } 
            // fall through
          case 88: break;
          case 28: 
            { return BITWISE_XOR;
            } 
            // fall through
          case 89: break;
          case 29: 
            { return PERCENT;
            } 
            // fall through
          case 90: break;
          case 30: 
            { return DATA_DEF;
            } 
            // fall through
          case 91: break;
          case 31: 
            { return REG_16;
            } 
            // fall through
          case 92: break;
          case 32: 
            { return REG_8;
            } 
            // fall through
          case 93: break;
          case 33: 
            { return LBL_DEF;
            } 
            // fall through
          case 94: break;
          case 34: 
            { return COMMENT;
            } 
            // fall through
          case 95: break;
          case 35: 
            { return FLOAT_DECIMAL;
            } 
            // fall through
          case 96: break;
          case 36: 
            { return BINARY;
            } 
            // fall through
          case 97: break;
          case 37: 
            { return HEXADECIMAL;
            } 
            // fall through
          case 98: break;
          case 38: 
            { return DOLLARSIGN2;
            } 
            // fall through
          case 99: break;
          case 39: 
            { return STRING;
            } 
            // fall through
          case 100: break;
          case 40: 
            { return EQUALEQUAL;
            } 
            // fall through
          case 101: break;
          case 41: 
            { return NOTEQUAL;
            } 
            // fall through
          case 102: break;
          case 42: 
            { return GREATERTHANOREQUAL;
            } 
            // fall through
          case 103: break;
          case 43: 
            { return BITSHIFT_R;
            } 
            // fall through
          case 104: break;
          case 44: 
            { return LESSTHANOREQUAL;
            } 
            // fall through
          case 105: break;
          case 45: 
            { return BITSHIFT_L;
            } 
            // fall through
          case 106: break;
          case 46: 
            { return LOGICAL_AND;
            } 
            // fall through
          case 107: break;
          case 47: 
            { return LOGICAL_OR;
            } 
            // fall through
          case 108: break;
          case 48: 
            { return LOGICAL_XOR;
            } 
            // fall through
          case 109: break;
          case 49: 
            { return TOKEN_CONCAT;
            } 
            // fall through
          case 110: break;
          case 50: 
            { return PERCENT2;
            } 
            // fall through
          case 111: break;
          case 51: 
            { return GENERAL_OP;
            } 
            // fall through
          case 112: break;
          case 52: 
            { return REG_64;
            } 
            // fall through
          case 113: break;
          case 53: 
            { return OP_PREFIX;
            } 
            // fall through
          case 114: break;
          case 54: 
            { return REG_32;
            } 
            // fall through
          case 115: break;
          case 55: 
            { return END_DIRECTIVE_OP;
            } 
            // fall through
          case 116: break;
          case 56: 
            { return DIRECTIVE_OP;
            } 
            // fall through
          case 117: break;
          case 57: 
            { return CHARACTER;
            } 
            // fall through
          case 118: break;
          case 58: 
            { return SIZE_PREFIX;
            } 
            // fall through
          case 119: break;
          case 59: 
            { return DATA_RES;
            } 
            // fall through
          case 120: break;
          case 60: 
            { return SECTION_NAME;
            } 
            // fall through
          case 121: break;
          case 61: 
            { return SECTION_DEF;
            } 
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
