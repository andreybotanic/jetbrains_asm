{
  parserClass = "com.andreybotanic.asm.nasm.parser.NasmParser"

  extends = "com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix = "Nasm"
  psiImplClassSuffix = "Impl"
  psiPackage = "com.andreybotanic.asm.nasm.psi"
  psiImplPackage = "com.andreybotanic.asm.nasm.psi.impl"

  elementTypeHolderClass = "com.andreybotanic.asm.nasm.psi.NasmTypes"
  elementTypeClass = "com.andreybotanic.asm.nasm.psi.NasmElementType"
  tokenTypeClass = "com.andreybotanic.asm.nasm.psi.NasmTokenType"

  psiImplUtilClass = "com.andreybotanic.asm.nasm.psi.impl.NasmPsiImplUtil"

  tokens = [
    // Most tokens I get from https://github.com/ajkhoury/JetBrains-NASM-Language/blob/master/src/com/nasmlanguage/NASM.bnf

    WHITE_SPACE         = 'regexp:[ \t\x0B\f]+'
    EOL                 = 'regexp:\R'

    //DATA_OP             = 'regexp:([rR][eE][sS][bBwWdDqQtToOyYzZ]|[dD][bBwWdDqQtToOyYzZ]|[tT][iI][mM][eE][sS])'
    DX                  = 'regexp:[dD][bBwWdDqQtToOyYzZ]'

    COMMENT             = 'regexp:;[^\r\n]*'

    REGISTER            = 'regexp:[re]?[abcd]x|[abcd][hl]'

    GENERAL_OP          = 'regexp:mov|xor|add|inc|dec|jmp'

    // Make last!
    ID                  = 'regexp:([a-zA-Z_?]+[a-zA-Z0-9_$.#@~?]*)' // Some identifier
    LBL_DEF             = 'regexp:([a-zA-Z$._?#@]+[a-zA-Z0-9$._~]*):' // Label definition
    LBL                 = 'regexp:([a-zA-Z$._?#@]+[a-zA-Z0-9$._~]*)' // Label can have chars like % . ? @ # ~ etc

    // Literals
    BINARY              = 'regexp:[1][01]*b'
    HEXADECIMAL         = 'regexp:(0x[0-9A-Fa-f]+)|([0-9A-Fa-f]+h)'
    ZEROES              = 'regexp:[0]+'
    DECIMAL             = 'regexp:((0[dD])?[0-9]+)'
    FLOAT_DECIMAL       = 'regexp:(([0-9]*\.[^A-Za-z][0-9]*)([Ee][+-]?[0-9]+)?)'
    CHARACTER           = "regexp:(`([^`\\]|\\.)`|'([^'\\]|\\.)')"
    STRING              = "regexp:(`([^`\\]|\\.)*`|'([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"

    COLON               = ':'
    SEMICOLON           = ';'
    SQUARE_L            = '['
    SQUARE_R            = ']'
    ROUND_L             = '('
    ROUND_R             = ')'
    SEPARATOR           = ','
    DOT                 = '.'
    QUESTION            = '?'

    EQUAL               = '='
    EQUALEQUAL          = '=='
    NOTEQUAL            = '!='
    GREATERTHAN         = '>'
    LESSTHAN            = '<'
    GREATERTHANOREQUAL  = '>='
    LESSTHANOREQUAL     = '<='

    PLUS                = '+'
    MINUS               = '-'
    TIMES               = '*'
    DIVIDE              = '/'
    BITSHIFT_L          = '<<'
    BITSHIFT_R          = '>>'
    BITWISE_AND         = '&'
    BITWISE_OR          = '|'
    BITWISE_XOR         = '^'
    BITWISE_NOT         = '~'
    LOGICAL_AND         = '&&'
    LOGICAL_OR          = '||'
    LOGICAL_XOR         = '^^'

    DOLLARSIGN          = '$'
    DOLLARSIGN2         = '$$'
    PERCENT             = '%'
    PERCENT2            = '%%'
    TOKEN_CONCAT        = '%+'

  ]
}

NasmFile ::= item_*

private item_ ::= COMMENT
                | Label
                | Instruction
                | DataElement
                | EOL
                | ID
                ;

Instruction ::= Operation Operands? COMMENT? (<<eof>> | EOL+)?

Operation ::= GENERAL_OP

Operands ::= Operand (SEPARATOR Operand)* { pin=1 recoverWhile=OperandRecover }
private OperandRecover ::= !(COMMENT | EOL)

Operand ::= REGISTER
          | (BINARY | DECIMAL | HEXADECIMAL | FLOAT_DECIMAL)
          | STRING
          | CHARACTER
          | Identifier
          | LabelIdentifier
          ;

Label ::= LBL_DEF EOL* {
    mixin       = "com.andreybotanic.asm.nasm.psi.impl.NasmNamedElementImpl"
    implements  = "com.andreybotanic.asm.nasm.psi.NasmNamedElement"
    methods     = [getName setName getNameIdentifier]
}

Identifier ::= ID {
    mixin       = "com.andreybotanic.asm.nasm.psi.impl.NasmNamedElementImpl"
    implements  = "com.andreybotanic.asm.nasm.psi.NasmNamedElement"
    methods     = [getName setName getNameIdentifier getReferences]
}

LabelIdentifier ::= LBL | ID {
    mixin       = "com.andreybotanic.asm.nasm.psi.impl.NasmNamedElementImpl"
    implements  = "com.andreybotanic.asm.nasm.psi.NasmNamedElement"
    methods     = [getName setName getNameIdentifier getReferences]
}

DataElement ::= LBL_DEF? DataStmt EOL*
DataValue ::= Expr | STRING | FLOAT_DECIMAL | QUESTION
DataStmt ::= DX DataValue (SEPARATOR DataValue)* { pin=2 recoverWhile=DataValueRecover }
private DataValueRecover ::= !(COMMENT | EOL)

Expr ::= ParenthesisExpr
       | NumericLiteral
       | Str
       ;

ParenthesisExpr ::= ROUND_L Expr ROUND_R { pin=1 extends=Expr }
NumericLiteral ::= SIZE_TYPE? (BITWISE_NOT|MINUS|PLUS)? (BINARY|ZEROES|HEXADECIMAL|DECIMAL|FLOAT_DECIMAL|CHARACTER) { extends=Expr }
Str ::= STRING { extends=Expr }